import { DOCUMENT } from '@angular/common';
import { Inject, Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { NgxKeyboardEventsModule } from './ngx-keyboard-events.module';
import * as i0 from "@angular/core";
export var NgxKey;
(function (NgxKey) {
    // letters and numbers
    NgxKey[NgxKey["A"] = 65] = "A";
    NgxKey[NgxKey["B"] = 66] = "B";
    NgxKey[NgxKey["C"] = 67] = "C";
    NgxKey[NgxKey["D"] = 68] = "D";
    NgxKey[NgxKey["E"] = 69] = "E";
    NgxKey[NgxKey["F"] = 70] = "F";
    NgxKey[NgxKey["G"] = 71] = "G";
    NgxKey[NgxKey["H"] = 72] = "H";
    NgxKey[NgxKey["I"] = 73] = "I";
    NgxKey[NgxKey["J"] = 74] = "J";
    NgxKey[NgxKey["K"] = 75] = "K";
    NgxKey[NgxKey["L"] = 76] = "L";
    NgxKey[NgxKey["M"] = 77] = "M";
    NgxKey[NgxKey["N"] = 78] = "N";
    NgxKey[NgxKey["O"] = 79] = "O";
    NgxKey[NgxKey["P"] = 80] = "P";
    NgxKey[NgxKey["Q"] = 81] = "Q";
    NgxKey[NgxKey["R"] = 82] = "R";
    NgxKey[NgxKey["S"] = 83] = "S";
    NgxKey[NgxKey["T"] = 84] = "T";
    NgxKey[NgxKey["U"] = 85] = "U";
    NgxKey[NgxKey["V"] = 86] = "V";
    NgxKey[NgxKey["W"] = 87] = "W";
    NgxKey[NgxKey["X"] = 88] = "X";
    NgxKey[NgxKey["Y"] = 89] = "Y";
    NgxKey[NgxKey["Z"] = 90] = "Z";
    NgxKey[NgxKey["Digit0"] = 48] = "Digit0";
    NgxKey[NgxKey["Digit1"] = 49] = "Digit1";
    NgxKey[NgxKey["Digit2"] = 50] = "Digit2";
    NgxKey[NgxKey["Digit3"] = 51] = "Digit3";
    NgxKey[NgxKey["Digit4"] = 52] = "Digit4";
    NgxKey[NgxKey["Digit5"] = 53] = "Digit5";
    NgxKey[NgxKey["Digit6"] = 54] = "Digit6";
    NgxKey[NgxKey["Digit7"] = 55] = "Digit7";
    NgxKey[NgxKey["Digit8"] = 56] = "Digit8";
    NgxKey[NgxKey["Digit9"] = 57] = "Digit9";
    NgxKey[NgxKey["Space"] = 32] = "Space";
    // punctuation
    NgxKey[NgxKey["Backslash"] = 220] = "Backslash";
    NgxKey[NgxKey["BracketLeft"] = 219] = "BracketLeft";
    NgxKey[NgxKey["BracketRight"] = 221] = "BracketRight";
    NgxKey[NgxKey["Comma"] = 188] = "Comma";
    NgxKey[NgxKey["Grave"] = 192] = "Grave";
    NgxKey[NgxKey["Period"] = 190] = "Period";
    NgxKey[NgxKey["Quote"] = 222] = "Quote";
    NgxKey[NgxKey["Semicolon"] = 186] = "Semicolon";
    NgxKey[NgxKey["Slash"] = 191] = "Slash";
    // modifiers
    NgxKey[NgxKey["Ctrl"] = 17] = "Ctrl";
    NgxKey[NgxKey["Shift"] = 16] = "Shift";
    NgxKey[NgxKey["Alt"] = 18] = "Alt";
    NgxKey[NgxKey["MetaLeft"] = 91] = "MetaLeft";
    NgxKey[NgxKey["WinLeft"] = 91] = "WinLeft";
    NgxKey[NgxKey["MetaRight"] = 92] = "MetaRight";
    NgxKey[NgxKey["WinRight"] = 92] = "WinRight";
    // F keys
    NgxKey[NgxKey["F1"] = 112] = "F1";
    NgxKey[NgxKey["F2"] = 113] = "F2";
    NgxKey[NgxKey["F3"] = 114] = "F3";
    NgxKey[NgxKey["F4"] = 115] = "F4";
    NgxKey[NgxKey["F5"] = 116] = "F5";
    NgxKey[NgxKey["F6"] = 117] = "F6";
    NgxKey[NgxKey["F7"] = 118] = "F7";
    NgxKey[NgxKey["F8"] = 119] = "F8";
    NgxKey[NgxKey["F9"] = 120] = "F9";
    NgxKey[NgxKey["F10"] = 121] = "F10";
    NgxKey[NgxKey["F11"] = 122] = "F11";
    NgxKey[NgxKey["F12"] = 123] = "F12";
    // random commands
    NgxKey[NgxKey["Backspace"] = 8] = "Backspace";
    NgxKey[NgxKey["Delete"] = 46] = "Delete";
    NgxKey[NgxKey["End"] = 35] = "End";
    NgxKey[NgxKey["Escape"] = 27] = "Escape";
    NgxKey[NgxKey["Home"] = 36] = "Home";
    NgxKey[NgxKey["Insert"] = 45] = "Insert";
    NgxKey[NgxKey["PageUp"] = 33] = "PageUp";
    NgxKey[NgxKey["PageDown"] = 34] = "PageDown";
    NgxKey[NgxKey["Pause"] = 19] = "Pause";
    NgxKey[NgxKey["PrintScreen"] = 44] = "PrintScreen";
    NgxKey[NgxKey["Return"] = 13] = "Return";
    // arrow keys
    NgxKey[NgxKey["LeftArrow"] = 37] = "LeftArrow";
    NgxKey[NgxKey["UpArrow"] = 38] = "UpArrow";
    NgxKey[NgxKey["RightArrow"] = 39] = "RightArrow";
    NgxKey[NgxKey["DownArrow"] = 40] = "DownArrow";
    // locks
    NgxKey[NgxKey["CapsLock"] = 9] = "CapsLock";
    NgxKey[NgxKey["NumLock"] = 144] = "NumLock";
    NgxKey[NgxKey["ScrollLock"] = 145] = "ScrollLock";
    // numpad
    NgxKey[NgxKey["NumPad0"] = 96] = "NumPad0";
    NgxKey[NgxKey["NumPad1"] = 97] = "NumPad1";
    NgxKey[NgxKey["NumPad2"] = 98] = "NumPad2";
    NgxKey[NgxKey["NumPad3"] = 99] = "NumPad3";
    NgxKey[NgxKey["NumPad4"] = 100] = "NumPad4";
    NgxKey[NgxKey["NumPad5"] = 101] = "NumPad5";
    NgxKey[NgxKey["NumPad6"] = 102] = "NumPad6";
    NgxKey[NgxKey["NumPad7"] = 103] = "NumPad7";
    NgxKey[NgxKey["NumPad8"] = 104] = "NumPad8";
    NgxKey[NgxKey["NumPad9"] = 105] = "NumPad9";
    NgxKey[NgxKey["NumPadAdd"] = 117] = "NumPadAdd";
    NgxKey[NgxKey["NumPadDecimal"] = 110] = "NumPadDecimal";
    NgxKey[NgxKey["NumPadDivide"] = 111] = "NumPadDivide";
    NgxKey[NgxKey["NumPadEnter"] = 113] = "NumPadEnter";
    NgxKey[NgxKey["NumPadMultiply"] = 106] = "NumPadMultiply";
    NgxKey[NgxKey["NumPadSubtract"] = 109] = "NumPadSubtract";
})(NgxKey || (NgxKey = {}));
export var NgxKeyLocation;
(function (NgxKeyLocation) {
    NgxKeyLocation[NgxKeyLocation["Standard"] = 0] = "Standard";
    NgxKeyLocation[NgxKeyLocation["Left"] = 1] = "Left";
    NgxKeyLocation[NgxKeyLocation["Right"] = 2] = "Right";
    NgxKeyLocation[NgxKeyLocation["NumPad"] = 3] = "NumPad";
})(NgxKeyLocation || (NgxKeyLocation = {}));
export var NgxKeyModifier;
(function (NgxKeyModifier) {
    NgxKeyModifier[NgxKeyModifier["AltOption"] = 0] = "AltOption";
    NgxKeyModifier[NgxKeyModifier["CtrlCmd"] = 1] = "CtrlCmd";
    NgxKeyModifier[NgxKeyModifier["Shift"] = 2] = "Shift";
})(NgxKeyModifier || (NgxKeyModifier = {}));
export class NgxKeyboardEvent {
}
export class NgxKeyboardEventsService {
    constructor(document) {
        this.document = document;
        this.onKeyDown$ = new Subject();
        this.onKeyUp$ = new Subject();
        if (!document.defaultView) {
            throw new Error("NgxKeyboardEvents requires a document with a truthy `defaultView` property.");
        }
        document.defaultView.addEventListener('keydown', (event) => {
            this.onKeyDown$.next(this.resolveKeyboardEvent(event));
        });
        document.defaultView.addEventListener('keyup', (event) => {
            this.onKeyUp$.next(this.resolveKeyboardEvent(event));
        });
    }
    resolveKeyboardEvent(keyEvent) {
        const modifiers = [];
        if (keyEvent.altKey) {
            modifiers.push(NgxKeyModifier.AltOption);
        }
        if (keyEvent.ctrlKey) {
            modifiers.push(NgxKeyModifier.CtrlCmd);
        }
        if (keyEvent.shiftKey) {
            modifiers.push(NgxKeyModifier.Shift);
        }
        return {
            code: keyEvent.keyCode,
            location: keyEvent.location,
            modifiers,
            name: keyEvent.code
        };
    }
}
NgxKeyboardEventsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.5", ngImport: i0, type: NgxKeyboardEventsService, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });
NgxKeyboardEventsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.5", ngImport: i0, type: NgxKeyboardEventsService, providedIn: NgxKeyboardEventsModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.5", ngImport: i0, type: NgxKeyboardEventsService, decorators: [{
            type: Injectable,
            args: [{ providedIn: NgxKeyboardEventsModule }]
        }], ctorParameters: function () { return [{ type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,